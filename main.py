from IMGcreator import *
from Deleter import *
import telebot
from telebot import types

bot = telebot.TeleBot('7723354892:AAEh8K98-gViX0kY9SrejcCu2KWxbYpV6ec')

key_menu = bool(True)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_state = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

example_dict = {
    "–ú–∞—Ç–∞–Ω–∞–ª": 0,
    "–§–∏–∑–∏–∫–∞": 0,
    "–î–∏—Å–∫—Ä–µ—Ç–∫–∞": 0,
    "–õ–∏–Ω–µ–π–∫–∞": 0
}
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ç–æ
@bot.message_handler(content_types=['photo'])
def get_photo(message):
    bot.reply_to(message, "–ù–æ—Ä–º–∏—Å")  # –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ

@bot.message_handler(commands=['start'])
def message_start(message):
    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}. –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã.")
    user_state[message.chat.id] = "waiting_for_group_id"  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if message.text:
        print(message.text)

def send_buttons_from_dict(message, data_dict):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, –≥–¥–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–ª–∏–Ω—ã —Å–ª–æ–≤–∞—Ä—è.
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è chat_id).
    :param data_dict: –°–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á–∏ ‚Äî –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫, –∞ –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî 0 –∏–ª–∏ 1.
    """
    markup = types.InlineKeyboardMarkup()  # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –∫–Ω–æ–ø–æ–∫

    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–π —Å–ª–æ–≤–∞—Ä—è, –≥–¥–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ 0
    for key, value in data_dict.items():
        if value == 0:  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –∫–Ω–æ–ø–∫–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–µ 0
            button = types.InlineKeyboardButton(text=key, callback_data=key)
            markup.add(button)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Ä–∞–∑–º–µ—Ç–∫—É

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    bot.send_message(message.chat.id, "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu
@bot.message_handler(commands=['menu'])
def message_menu(message):
    markup = types.InlineKeyboardMarkup()

    btn_preWeek = types.InlineKeyboardButton("‚óÄÔ∏è", callback_data='preWeek')
    btn_currentWeek = types.InlineKeyboardButton("üîÑ", callback_data='currentWeek')
    btn_nextWeek = types.InlineKeyboardButton("‚ñ∂Ô∏è", callback_data='nextWeek')

    markup.row(btn_preWeek, btn_currentWeek, btn_nextWeek)

    if key_menu:
        btn_schedule = types.InlineKeyboardButton("–ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üìÖ", callback_data='schedule')
        btn_scheduleOrHomework = btn_schedule
    else:
        btn_homework = types.InlineKeyboardButton("–ú–æ–µ –î/–ó üìöÔ∏è", callback_data='homework')
        btn_scheduleOrHomework = btn_homework

    btn_progress = types.InlineKeyboardButton("–ü—Ä–æ–≥—Ä–µ—Å—Å ‚úÖ", callback_data='progress')
    markup.row(btn_scheduleOrHomework, btn_progress)

    btn_lookSchedule = types.InlineKeyboardButton("–ö–æ–Ω—Å–ø–µ–∫—Ç—ã üìù", callback_data='lookAbstract')
    btn_homeworkManage = types.InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –î/–ó üìãÔ∏è", callback_data='homeworkManage')
    markup.row(btn_lookSchedule, btn_homeworkManage)

    table_menu = open('table.png', 'rb')
    bot.send_photo(message.chat.id, table_menu, reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_text(message):
    chat_id = message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_state.get(chat_id) == "waiting_for_subject":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
        user_data[chat_id] = {"subject": message.text}
        bot.send_message(chat_id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2023-10-15):")
        user_state[chat_id] = "waiting_for_date"  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞—Ç—ã

    elif user_state.get(chat_id) == "waiting_for_date":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É
        user_data[chat_id]["date"] = message.text
        bot.send_message(chat_id, f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: –ü—Ä–µ–¥–º–µ—Ç - {user_data[chat_id]['subject']}, –î–∞—Ç–∞ - {user_data[chat_id]['date']}")
        user_state[chat_id] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


@bot.message_handler(func=lambda message: True)
def handle_text(message):
    chat_id = message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_state.get(chat_id) == "waiting_for_group_id":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –≤ —Å–ª–æ–≤–∞—Ä—å user_data
        user_data[chat_id] = {"group_id": message.text}
        bot.send_message(chat_id, f"–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã '{message.text}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        user_state[chat_id] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


# –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
def lesson_message(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:")
    user_state[message.chat.id] = "waiting_for_subject"  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


# –ú–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
def delete_message(message):
    try:
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback):
    global key_menu
    if callback.data == 'preWeek':
        print()
    if callback.data == 'currentWeek':
        print()
    if callback.data == 'nextWeek':
        print()
    if callback.data == "schedule":
        key_menu = False
        delete_message(callback.message)
        message_menu(callback.message)
    if callback.data == "homework":
        key_menu = True
        delete_message(callback.message)
        message_menu(callback.message)
    if callback.data == "lookAbstract":
        lesson_message(callback.message)
    if callback.data == "homeworkManage":
        send_buttons_from_dict(callback.message, example_dict)
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        selected_key = callback.data
        if selected_key in example_dict:
            example_dict[selected_key] = 1  # –ú–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ 1
            bot.send_message(callback.message.chat.id, f"–ó–∞–¥–∞–Ω–∏–µ: [{selected_key}] –≤—ã–ø–æ–ª–Ω–µ–Ω–æ‚úÖ")
            # –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ (—Ç–µ–ø–µ—Ä—å –±–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π)
            send_buttons_from_dict(callback.message, example_dict)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info
@bot.message_handler(commands=['info'])
def message_info(message):
    bot.send_message(message.chat.id, f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n {message}")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)